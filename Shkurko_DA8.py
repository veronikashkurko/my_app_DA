# -*- coding: utf-8 -*-
"""Shkurko_DA8.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlnQt9GJg2DuJqAGAoIFTebX6nC7hNK-
"""

#–∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression

df = pd.read_csv('data.csv')

df.info()
df.describe()

missing_data = df.isnull()
for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

st.set_page_config(
    page_title="–ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∫—Ä–∞—ó–Ω –∑–∞ 2019-2023 —Ä–æ–∫–∏",
    page_icon="üåé",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': 'https://github.com/streamlit/streamlit/issues',
        'About': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∫—Ä–∞—ó–Ω'
    }
)

st.sidebar.title("–ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

selected_year = st.sidebar.selectbox("–†—ñ–∫", sorted(df["Year"].unique()))
selected_region = st.sidebar.multiselect("–†–µ–≥—ñ–æ–Ω", df["Region"].unique(), default=df["Region"].unique())
selected_—Åountry = st.sidebar.multiselect("–ö—Ä–∞—ó–Ω–∞", df["Country Name"].unique(), default=df["Country Name"].unique())

selected_max_population = st.sidebar.slider(
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—è",
    min_value=int(df["Population"].min()),
    max_value=int(df["Population"].max()),
    value=int(df["Population"].max()),
    step=100000
)

show_map = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞–ø—É —Å–≤—ñ—Ç—É")

# –ü–µ—Ä–µ–º–∏–∫–∞—á –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
chart_option = st.sidebar.radio(
    "üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    [
        "–ï–∫—Å–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω–∏ vs –Ü–º–ø–æ—Ä—Ç",
        "Boxplot –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞–º",
        "Scatter: –í–í–ü vs –ï–∫—Å–ø–æ—Ä—Ç",
        "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π"
    ]
)

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è

df_filtered = df[
    (df["Year"] == selected_year) &
    (df["Region"].isin(selected_region)) &
    (df["Country Name"].isin(selected_—Åountry)) &
    (df["Population"] <= selected_max_population)
]

st.sidebar.markdown("–ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ—ó")
numeric_columns = df_filtered.select_dtypes(include=np.number).columns.tolist()

reg_x = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É X", numeric_columns, index=0)
reg_y = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É Y", numeric_columns, index=1)
show_regression = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω—É –º–æ–¥–µ–ª—å")


# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
st.sidebar.markdown("---")
st.sidebar.markdown(" **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è**: \n–í –¥–∞–Ω—ñ–π —Ä–æ–±–æ—Ç—ñ –Ω–∞–¥–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è, –í–í–ü , –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É 15 –∫—Ä–∞—ó–Ω —Å–≤—ñ—Ç—É. –î–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ñ—ñ–ª—å—Ç—Ä—É–π—Ç–µ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –ø–∞–Ω–µ–ª—ñ –ø—Ä–∞–≤–æ—Ä—É—á.")
st.sidebar.markdown(" **–ê–≤—Ç–æ—Ä**: –®–∫—É—Ä–∫–æ –í–µ—Ä–æ–Ω—ñ–∫–∞")

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è

df_filtered = df[
    (df["Year"] == selected_year) &
    (df["Region"].isin(selected_region)) &
    (df["Country Name"].isin(selected_—Åountry)) &
    (df["Population"] <= selected_max_population)
]


# –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å

st.title("üåé –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –∫—Ä–∞—ó–Ω")
st.subheader(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {df_filtered.shape[0]} –∫—Ä–∞—ó–Ω")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
csv = df_filtered.to_csv(index=False).encode("utf-8")
st.download_button(
    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
    data=csv,
    file_name="data.csv",
    mime="text/csv"
)

# –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

st.subheader("–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤
all_columns = df_filtered.columns.tolist()
default_columns = ["Country Name", "Region", "GDP (current US$)"]

selected_columns = st.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    options=all_columns,
    default=[col for col in default_columns if col in all_columns]
)

if selected_columns:
    st.dataframe(df_filtered[selected_columns])
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")


# –ö–∞—Ä—Ç–∞ –∫—Ä–∞—ó–Ω
if show_map:
    st.subheader("–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è –∫—Ä–∞—ó–Ω")

    map_data = df_filtered[["Latitude", "Longitude"]].dropna().rename(
        columns={"Latitude": "latitude", "Longitude": "longitude"}
    )

    if not map_data.empty:
        st.map(map_data)
    else:
        st.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫–∞—Ä—Ç–∏.")



# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞

if chart_option == "–ï–∫—Å–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω–∏ vs –Ü–º–ø–æ—Ä—Ç":
    st.subheader("üìä –ï–∫—Å–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω–∏ vs –Ü–º–ø–æ—Ä—Ç")
    chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
        x='Exports',
        y='Imports',
        color='Region:N',
        tooltip=['Country Name', 'Exports', 'Imports', 'Region']
    ).interactive().properties(title="–ï–∫—Å–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω–∏ vs –Ü–º–ø–æ—Ä—Ç")
    st.altair_chart(chart, use_container_width=True)

elif chart_option == "Boxplot –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞–º":
    st.subheader("üìä Boxplot –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞–º")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.boxplot(data=df_filtered, x="Region", y="Population", ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞–º")
    st.pyplot(fig)

elif chart_option == "Scatter: –í–í–ü vs –ï–∫—Å–ø–æ—Ä—Ç":
    st.subheader("üìä Scatter: –í–í–ü vs –ï–∫—Å–ø–æ—Ä—Ç")
    chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
        x='GDP',
        y='Exports',
        color='Region',
        tooltip=['Country Name', 'GDP', 'Exports']
    ).interactive().properties(title="–í–í–ü vs –ï–∫—Å–ø–æ—Ä—Ç")
    st.altair_chart(chart, use_container_width=True)

elif chart_option == "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π":
    st.subheader("üìä –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
    numeric_cols = df_filtered.select_dtypes(include=[np.number])
    corr = numeric_cols.corr()
    fig, ax = plt.subplots(figsize=(7, 5))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    ax.set_title("–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
    st.pyplot(fig)

# –ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ
if show_regression:
    st.subheader(f"üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è: {reg_y} ~ {reg_x}")

    df_reg = df_filtered[[reg_x, reg_y]].dropna()

    if df_reg.shape[0] >= 2:
        model = LinearRegression()
        model.fit(df_reg[[reg_x]], df_reg[reg_y])
        y_pred = model.predict(df_reg[[reg_x]])

        coef = model.coef_[0]
        intercept = model.intercept_
        r2 = model.score(df_reg[[reg_x]], df_reg[reg_y])

        st.markdown(f"**–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞—Ö–∏–ª—É (Œ≤):** {coef:.4f}")
        st.markdown(f"**–ó—Å—É–≤ (intercept):** {intercept:.4f}")
        st.markdown(f"**R¬≤:** {r2:.4f}")

        fig, ax = plt.subplots(figsize=(8, 5))
        sns.scatterplot(data=df_reg, x=reg_x, y=reg_y, ax=ax)
        sns.lineplot(x=df_reg[reg_x], y=y_pred, color='red', ax=ax)
        ax.set_title(f"–†–µ–≥—Ä–µ—Å—ñ—è {reg_y} ~ {reg_x}")
        st.pyplot(fig)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ä–µ–≥—Ä–µ—Å—ñ—ó.")